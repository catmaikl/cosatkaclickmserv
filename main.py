import telebot
from telebot import types
import random
import time
import sqlite3
import json
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = telebot.TeleBot('YOUR_BOT_TOKEN_HERE')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  coins INTEGER DEFAULT 0,
                  level INTEGER DEFAULT 1,
                  exp INTEGER DEFAULT 0,
                  energy INTEGER DEFAULT 100,
                  last_energy_update DATETIME,
                  created DATETIME DEFAULT CURRENT_TIMESTAMP)''')

    # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    c.execute('''CREATE TABLE IF NOT EXISTS inventory
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  item_id INTEGER,
                  quantity INTEGER DEFAULT 1,
                  FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS achievements
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  achievement_id INTEGER,
                  unlocked DATETIME DEFAULT CURRENT_TIMESTAMP,
                  FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    conn.commit()
    conn.close()

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
class GameState:
    def __init__(self):
        self.user_states = {}

    def set_state(self, user_id, state):
        self.user_states[user_id] = state

    def get_state(self, user_id):
        return self.user_states.get(user_id, 'main_menu')

game_state = GameState()

# –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ITEMS = {
    1: {"name": "–†—ã–±–∫–∞", "price": 10, "energy": 20},
    2: {"name": "–ú–æ–ª–æ–∫–æ", "price": 5, "energy": 10},
    3: {"name": "–ú—è—á–∏–∫", "price": 15, "fun": 20},
    4: {"name": "–ö–æ–≥—Ç–µ—Ç–æ—á–∫–∞", "price": 50, "fun": 40},
    5: {"name": "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞", "price": 100, "energy": 50, "coins": 20}
}

ACHIEVEMENTS = {
    1: {"name": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "description": "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"},
    2: {"name": "–ë–æ–≥–∞—Ç—ã–π –∫–æ—Ç", "description": "–ù–∞–∫–æ–ø–∏—Ç—å 100 –º–æ–Ω–µ—Ç"},
    3: {"name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "description": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"},
    4: {"name": "–ì—É—Ä–º–∞–Ω", "description": "–°—ä–µ—Å—Ç—å 10 —Ä—ã–±–æ–∫"}
}

MINIGAMES = {
    "hunt": {"name": "–û—Ö–æ—Ç–∞", "energy_cost": 15, "min_coins": 5, "max_coins": 25, "exp": 10},
    "play": {"name": "–ò–≥—Ä–∞—Ç—å", "energy_cost": 10, "min_coins": 3, "max_coins": 15, "exp": 8},
    "sleep": {"name": "–°–æ–Ω", "energy_gain": 30, "time_required": 300}  # 5 –º–∏–Ω—É—Ç
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user_data(user_id):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    conn.close()

    if user:
        return {
            "user_id": user[0],
            "username": user[1],
            "coins": user[2],
            "level": user[3],
            "exp": user[4],
            "energy": user[5],
            "last_energy_update": user[6]
        }
    return None

def create_user(user_id, username):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (user_id, username, last_energy_update) VALUES (?, ?, ?)",
              (user_id, username, datetime.now()))
    conn.commit()
    conn.close()

def update_energy(user_id):
    user = get_user_data(user_id)
    if user and user['energy'] < 100:
        last_update = datetime.strptime(user['last_energy_update'], '%Y-%m-%d %H:%M:%S')
        now = datetime.now()
        time_diff = (now - last_update).seconds

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: 1 —ç–Ω–µ—Ä–≥–∏—è –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
        energy_gain = min(time_diff // 180, 100 - user['energy'])

        if energy_gain > 0:
            conn = sqlite3.connect('kosatka_game.db')
            c = conn.cursor()
            c.execute("UPDATE users SET energy = energy + ?, last_energy_update = ? WHERE user_id = ?",
                      (energy_gain, now, user_id))
            conn.commit()
            conn.close()
            return energy_gain
    return 0

def add_coins(user_id, amount):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("UPDATE users SET coins = coins + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

def add_exp(user_id, amount):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("UPDATE users SET exp = exp + ? WHERE user_id = ?", (amount, user_id))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
    c.execute("SELECT level, exp FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    exp_needed = user[0] * 100
    if user[1] >= exp_needed:
        c.execute("UPDATE users SET level = level + 1, exp = exp - ? WHERE user_id = ?",
                 (exp_needed, user_id))
        conn.commit()
        conn.close()
        return True  # –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω
    conn.close()
    return False

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.from_user.id
    username = message.from_user.username

    if not get_user_data(user_id):
        create_user(user_id, username)
        unlock_achievement(user_id, 1)
        bot.send_message(message.chat.id, "üê± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ø—Ä–æ –ö–æ—Å–∞—Ç–∫—É!")

    show_main_menu(message.chat.id, user_id)

def show_main_menu(chat_id, user_id):
    update_energy(user_id)
    user = get_user_data(user_id)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
    keyboard.row("üìä –ü—Ä–æ—Ñ–∏–ª—å", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
    keyboard.row("üê± –ü–æ–≥–ª–∞–¥–∏—Ç—å –ö–æ—Å–∞—Ç–∫—É")

    message = f"""üê± *–ö–æ—Å–∞—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è!*

üíé –ú–æ–Ω–µ—Ç—ã: {user['coins']}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user['energy']}/100
üìà –£—Ä–æ–≤–µ–Ω—å: {user['level']}
‚≠ê –û–ø—ã—Ç: {user['exp']}/{user['level'] * 100}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    bot.send_message(chat_id, message, parse_mode='Markdown', reply_markup=keyboard)
    game_state.set_state(user_id, 'main_menu')

@bot.message_handler(func=lambda message: message.text == "üìä –ü—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    profile_text = f"""üê± *–ü—Ä–æ—Ñ–∏–ª—å –ö–æ—Å–∞—Ç–∫–∏*

üë§ –ò–≥—Ä–æ–∫: @{user['username']}
üíé –ú–æ–Ω–µ—Ç—ã: {user['coins']}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {user['energy']}/100
üìà –£—Ä–æ–≤–µ–Ω—å: {user['level']}
‚≠ê –û–ø—ã—Ç: {user['exp']}/{user['level'] * 100}

–ö–æ—Å–∞—Ç–∫–∞ - –∏–≥—Ä–∏–≤—ã–π –∫–æ—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç:
‚Ä¢ üê≠ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –º—ã—à–µ–π
‚Ä¢ üß∂ –ò–≥—Ä–∞—Ç—å —Å –∫–ª—É–±–∫–æ–º
‚Ä¢ üò¥ –°–ø–∞—Ç—å –Ω–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ"""

    bot.send_message(message.chat.id, profile_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã")
def show_minigames(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üê≠ –û—Ö–æ—Ç–∞ (15‚ö°)", callback_data="game_hunt"))
    keyboard.add(types.InlineKeyboardButton("üß∂ –ò–≥—Ä–∞—Ç—å (10‚ö°)", callback_data="game_play"))
    keyboard.add(types.InlineKeyboardButton("üò¥ –°–æ–Ω (5 –º–∏–Ω)", callback_data="game_sleep"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))

    bot.send_message(message.chat.id, "üéÆ *–í—ã–±–µ—Ä–∏ –º–∏–Ω–∏-–∏–≥—Ä—É:*\n\n–≠–Ω–µ—Ä–≥–∏—è: {}/100".format(user['energy']), 
                    parse_mode='Markdown', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
def show_shop(message):
    keyboard = types.InlineKeyboardMarkup()
    for item_id, item in ITEMS.items():
        btn_text = f"{item['name']} - {item['price']}üíé"
        keyboard.add(types.InlineKeyboardButton(btn_text, callback_data=f"buy_{item_id}"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))

    bot.send_message(message.chat.id, "üõçÔ∏è *–ú–∞–≥–∞–∑–∏–Ω –¥–ª—è –ö–æ—Å–∞—Ç–∫–∏:*", parse_mode='Markdown', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
def show_achievements(message):
    user_id = message.from_user.id
    achievements = get_user_achievements(user_id)

    achievements_text = "üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
    for ach_id, achievement in ACHIEVEMENTS.items():
        status = "‚úÖ" if ach_id in achievements else "‚ùå"
        achievements_text += f"{status} *{achievement['name']}* - {achievement['description']}\n"

    bot.send_message(message.chat.id, achievements_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text == "üê± –ü–æ–≥–ª–∞–¥–∏—Ç—å –ö–æ—Å–∞—Ç–∫—É")
def pet_kosatka(message):
    responses = [
        "–ö–æ—Å–∞—Ç–∫–∞ –º—É—Ä–ª—ã—á–µ—Ç –æ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è! üê±üíï",
        "–ú—É—Ä-–º—É—Ä! –ö–æ—Å–∞—Ç–∫–∞ —Ç—Ä–µ—Ç—Å—è –æ –≤–∞—à—É —Ä—É–∫—É! üòª",
        "–ö–æ—Å–∞—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ø–∏–Ω—É, –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø–æ—á–µ—Å–∞—Ç—å –∂–∏–≤–æ—Ç–∏–∫! üêæ",
        "–ú—è—É! –ö–æ—Å–∞—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –ª–∞—Å–∫—É! ü•∞"
    ]
    bot.send_message(message.chat.id, random.choice(responses))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    user = get_user_data(user_id)

    if call.data == "back_main":
        show_main_menu(call.message.chat.id, user_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data.startswith("game_"):
        game_type = call.data.split("_")[1]
        play_minigame(call, game_type, user)

    elif call.data.startswith("buy_"):
        item_id = int(call.data.split("_")[1])
        buy_item(call, item_id, user)

def play_minigame(call, game_type, user):
    if game_type == "hunt":
        if user['energy'] >= MINIGAMES["hunt"]["energy_cost"]:
            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ö–æ—Ç—ã
            coins_earned = random.randint(MINIGAMES["hunt"]["min_coins"], MINIGAMES["hunt"]["max_coins"])
            add_coins(user_id, coins_earned)
            add_exp(user_id, MINIGAMES["hunt"]["exp"])
            update_energy_after_activity(user_id, MINIGAMES["hunt"]["energy_cost"])

            hunt_results = [
                "–ö–æ—Å–∞—Ç–∫–∞ –ø–æ–π–º–∞–ª–∞ –º—ã—à—å! üê≠",
                "–ö–æ—Å–∞—Ç–∫–∞ –æ—Ö–æ—Ç–∏—Ç—Å—è –Ω–∞ –ø—Ç–∏—á–µ–∫! üê¶",
                "–ö–æ—Å–∞—Ç–∫–∞ –≥–æ–Ω—è–µ—Ç—Å—è –∑–∞ –±–∞–±–æ—á–∫–æ–π! ü¶ã"
            ]

            bot.edit_message_text(f"{random.choice(hunt_results)}\n\n+{coins_earned}üíé | +{MINIGAMES['hunt']['exp']}‚≠ê",
                                call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!")

    elif game_type == "play":
        if user['energy'] >= MINIGAMES["play"]["energy_cost"]:
            coins_earned = random.randint(MINIGAMES["play"]["min_coins"], MINIGAMES["play"]["max_coins"])
            add_coins(user_id, coins_earned)
            add_exp(user_id, MINIGAMES["play"]["exp"])
            update_energy_after_activity(user_id, MINIGAMES["play"]["energy_cost"])

            play_results = [
                "–ö–æ—Å–∞—Ç–∫–∞ –∏–≥—Ä–∞–µ—Ç —Å –∫–ª—É–±–∫–æ–º –Ω–∏—Ç–æ–∫! üß∂",
                "–ö–æ—Å–∞—Ç–∫–∞ –±–µ–≥–∞–µ—Ç –∑–∞ –ª–∞–∑–µ—Ä–Ω–æ–π —É–∫–∞–∑–∫–æ–π! üî¥",
                "–ö–æ—Å–∞—Ç–∫–∞ –ø—Ä—ã–≥–∞–µ—Ç –∑–∞ –±—É–º–∞–∂–Ω—ã–º –±–∞–Ω—Ç–∏–∫–æ–º! üéÄ"
            ]

            bot.edit_message_text(f"{random.choice(play_results)}\n\n+{coins_earned}üíé | +{MINIGAMES['play']['exp']}‚≠ê",
                                call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!")

    elif game_type == "sleep":
        bot.edit_message_text("üò¥ –ö–æ—Å–∞—Ç–∫–∞ –ª–µ–≥–ª–∞ —Å–ø–∞—Ç—å... –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!",
                            call.message.chat.id, call.message.message_id)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞

def buy_item(call, item_id, user):
    item = ITEMS[item_id]
    if user['coins'] >= item['price']:
        add_coins(user_id, -item['price'])
        add_to_inventory(user_id, item_id)

        if item_id in [1, 2, 5]:  # –ï–¥–∞
            update_energy_after_activity(user_id, -item.get('energy', 0))
            bot.edit_message_text(f"–ö–æ—Å–∞—Ç–∫–∞ —Å—ä–µ–ª–∞ {item['name']}! –ù—è–º-–Ω—è–º! üçΩÔ∏è",
                                call.message.chat.id, call.message.message_id)
        else:
            bot.edit_message_text(f"–í—ã –∫—É–ø–∏–ª–∏ {item['name']} –¥–ª—è –ö–æ—Å–∞—Ç–∫–∏! üéÅ",
                                call.message.chat.id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def update_energy_after_activity(user_id, energy_cost):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("UPDATE users SET energy = energy - ? WHERE user_id = ?", (energy_cost, user_id))
    conn.commit()
    conn.close()

def add_to_inventory(user_id, item_id):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("INSERT INTO inventory (user_id, item_id) VALUES (?, ?)", (user_id, item_id))
    conn.commit()
    conn.close()

def get_user_achievements(user_id):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("SELECT achievement_id FROM achievements WHERE user_id = ?", (user_id,))
    achievements = [row[0] for row in c.fetchall()]
    conn.close()
    return achievements

def unlock_achievement(user_id, achievement_id):
    conn = sqlite3.connect('kosatka_game.db')
    c = conn.cursor()
    c.execute("INSERT INTO achievements (user_id, achievement_id) VALUES (?, ?)", 
              (user_id, achievement_id))
    conn.commit()
    conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    print("–ë–æ—Ç –ö–æ—Å–∞—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()