import telebot
import sqlite3
import time
from telebot import types
from datetime import datetime, timedelta

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot('8441483520:AAEGbAyEaRdNvjK61MqFFsj4b-YeqACVs98')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0,
            last_claim TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            miners INTEGER DEFAULT 0,
            total_earned INTEGER DEFAULT 0
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —É–ª—É—á—à–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS upgrades (
            user_id INTEGER,
            upgrade_type TEXT,
            level INTEGER DEFAULT 1,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')

    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()

    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                  (user_id, username))

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    upgrades = ['miner_speed', 'click_power', 'offline_earnings']
    for upgrade in upgrades:
        cursor.execute('INSERT OR IGNORE INTO upgrades (user_id, upgrade_type) VALUES (?, ?)',
                      (user_id, upgrade))

    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()

    cursor.execute('SELECT * FROM upgrades WHERE user_id = ?', (user_id,))
    upgrades = cursor.fetchall()

    conn.close()

    if user_data:
        return {
            'user_id': user_data[0],
            'username': user_data[1],
            'balance': user_data[2],
            'last_claim': user_data[3],
            'miners': user_data[4],
            'total_earned': user_data[5],
            'upgrades': {upgrade[1]: upgrade[2] for upgrade in upgrades}
        }
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()

    cursor.execute('UPDATE users SET balance = balance + ?, total_earned = total_earned + ? WHERE user_id = ?',
                  (amount, amount, user_id))

    conn.commit()
    conn.close()

# –ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞
def buy_miner(user_id):
    user = get_user_data(user_id)
    miner_cost = 100 * (user['miners'] + 1)  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

    if user['balance'] >= miner_cost:
        conn = sqlite3.connect('miner_game.db')
        cursor = conn.cursor()

        cursor.execute('UPDATE users SET balance = balance - ?, miners = miners + 1 WHERE user_id = ?',
                      (miner_cost, user_id))

        conn.commit()
        conn.close()
        return True, miner_cost
    return False, miner_cost

# –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def upgrade_parameter(user_id, upgrade_type):
    user = get_user_data(user_id)
    current_level = user['upgrades'][upgrade_type]
    upgrade_cost = 500 * current_level  # –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è

    if user['balance'] >= upgrade_cost:
        conn = sqlite3.connect('miner_game.db')
        cursor = conn.cursor()

        cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?',
                      (upgrade_cost, user_id))

        cursor.execute('UPDATE upgrades SET level = level + 1 WHERE user_id = ? AND upgrade_type = ?',
                      (user_id, upgrade_type))

        conn.commit()
        conn.close()
        return True, upgrade_cost
    return False, upgrade_cost

# –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
def calculate_offline_earnings(user_id):
    user = get_user_data(user_id)
    last_claim = datetime.strptime(user['last_claim'], '%Y-%m-%d %H:%M:%S')
    now = datetime.now()

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–∫–∞ - 24 —á–∞—Å–∞
    time_diff = min((now - last_claim).total_seconds(), 86400)

    # –ë–∞–∑–æ–≤—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: 1 –º–æ–Ω–µ—Ç–∞ –≤ –º–∏–Ω—É—Ç—É –∑–∞ –º–∞–π–Ω–µ—Ä–∞
    base_earnings = user['miners'] * (time_diff / 60)

    # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–∫–∞
    offline_multiplier = user['upgrades']['offline_earnings'] * 0.5
    total_earnings = base_earnings * (1 + offline_multiplier)

    return int(total_earnings)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
def update_last_claim(user_id):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()

    cursor.execute('UPDATE users SET last_claim = CURRENT_TIMESTAMP WHERE user_id = ?', (user_id,))

    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üí∞ –ë–∞–ª–∞–Ω—Å', '‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å')
    markup.row('üè™ –ú–∞–≥–∞–∑–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.row('üéÅ –ó–∞–±—Ä–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥')
    return markup

# –ú–∞–≥–∞–∑–∏–Ω
def shop_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä', callback_data='buy_miner'),
        types.InlineKeyboardButton('‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞', callback_data='upgrade_speed')
    )
    markup.row(
        types.InlineKeyboardButton('üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞', callback_data='upgrade_power'),
        types.InlineKeyboardButton('üåô –û—Ñ—Ñ–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–æ–∫', callback_data='upgrade_offline')
    )
    markup.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    register_user(message.from_user.id, message.from_user.username)

    welcome_text = """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–õ–µ–Ω–∏–≤–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞*! üöÄ

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –ø–æ–∫—É–ø–∞—Ç—å –º–∞–π–Ω–µ—Ä—ã –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üí∞ –ë–∞–ª–∞–Ω—Å - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å
‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã –∫–ª–∏–∫–æ–º
üè™ –ú–∞–≥–∞–∑–∏–Ω - –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üéÅ –ó–∞–±—Ä–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥ - –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è

*–ù–∞—á–Ω–∏ –º–∞–π–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!* ‚õèÔ∏è
    """

    bot.send_message(message.chat.id, welcome_text, 
                    parse_mode='Markdown', reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    if message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
        offline_earnings = calculate_offline_earnings(user_id)
        balance_text = f"""
*–í–∞—à –±–∞–ª–∞–Ω—Å:* {user['balance']} ü™ô

*–ú–∞–π–Ω–µ—Ä–æ–≤:* {user['miners']} ‚õèÔ∏è
*–û—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥:* {offline_earnings} ü™ô
*–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {user['total_earned']} ü™ô

–ú–∞–π–Ω–µ—Ä—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—ã –æ—Ñ—Ñ–ª–∞–π–Ω!
        """
        bot.send_message(message.chat.id, balance_text, parse_mode='Markdown')

    elif message.text == '‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å':
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–ª–∏–∫
        base_reward = 10
        click_power = user['upgrades']['click_power']
        reward = base_reward * click_power

        update_balance(user_id, reward)
        update_last_claim(user_id)

        bot.send_message(message.chat.id, 
                        f"‚õèÔ∏è –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ *{reward} –º–æ–Ω–µ—Ç*! –ë–∞–ª–∞–Ω—Å: {user['balance'] + reward} ü™ô",
                        parse_mode='Markdown')

    elif message.text == 'üè™ –ú–∞–≥–∞–∑–∏–Ω':
        bot.send_message(message.chat.id, "üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*", 
                        parse_mode='Markdown', reply_markup=shop_menu())

    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stats_text = f"""
*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

*–ë–∞–ª–∞–Ω—Å:* {user['balance']} ü™ô
*–ú–∞–π–Ω–µ—Ä–æ–≤:* {user['miners']} ‚õèÔ∏è
*–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {user['total_earned']} ü™ô

*–£–ª—É—á—à–µ–Ω–∏—è:*
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: –£—Ä–æ–≤–µ–Ω—å {user['upgrades']['miner_speed']}
üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: –£—Ä–æ–≤–µ–Ω—å {user['upgrades']['click_power']}
üåô –û—Ñ—Ñ–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–æ–∫: –£—Ä–æ–≤–µ–Ω—å {user['upgrades']['offline_earnings']}
        """
        bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

    elif message.text == 'üéÅ –ó–∞–±—Ä–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥':
        earnings = calculate_offline_earnings(user_id)
        if earnings > 0:
            update_balance(user_id, earnings)
            update_last_claim(user_id)
            bot.send_message(message.chat.id, 
                           f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *{earnings} –º–æ–Ω–µ—Ç* –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è!",
                           parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, 
                           "‚è∞ –í—ã –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    user = get_user_data(user_id)

    if call.data == 'buy_miner':
        success, cost = buy_miner(user_id)
        if success:
            bot.answer_callback_query(call.id, f"‚úÖ –ö—É–ø–ª–µ–Ω –º–∞–π–Ω–µ—Ä –∑–∞ {cost} –º–æ–Ω–µ—Ç!")
            bot.edit_message_text("üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*\n‚úÖ –ú–∞–π–Ω–µ—Ä –∫—É–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                                call.message.chat.id, call.message.message_id,
                                parse_mode='Markdown', reply_markup=shop_menu())
        else:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}")

    elif call.data.startswith('upgrade_'):
        upgrade_type = call.data.split('_')[1]
        success, cost = upgrade_parameter(user_id, f"{upgrade_type}_power" if upgrade_type == "click" else f"{upgrade_type}_earnings" if upgrade_type == "offline" else f"miner_{upgrade_type}")

        if success:
            bot.answer_callback_query(call.id, f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ –∑–∞ {cost} –º–æ–Ω–µ—Ç!")
            bot.edit_message_text("üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*\n‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                                call.message.chat.id, call.message.message_id,
                                parse_mode='Markdown', reply_markup=shop_menu())
        else:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}")

    elif call.data == 'back_to_main':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)