import telebot
import sqlite3
import time
import random
import os
from datetime import datetime, timedelta
from telebot import types
from flask import Flask, request

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
TOKEN = os.environ.get('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
PORT = int(os.environ.get('PORT', 5000))

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ WEBHOOK_URL –¥–ª—è Render
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME', '')
if RENDER_EXTERNAL_HOSTNAME:
    WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}"
else:
    WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')

bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0,
            last_claim TEXT DEFAULT CURRENT_TIMESTAMP,
            miners INTEGER DEFAULT 0,
            total_earned INTEGER DEFAULT 0,
            click_power INTEGER DEFAULT 1,
            miner_speed INTEGER DEFAULT 1,
            offline_earnings INTEGER DEFAULT 1
        )
    ''')
    
    conn.commit()
    conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()
    
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                  (user_id, username or 'Unknown'))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    
    conn.close()
    
    if user_data:
        return {
            'user_id': user_data[0],
            'username': user_data[1],
            'balance': user_data[2],
            'last_claim': user_data[3],
            'miners': user_data[4],
            'total_earned': user_data[5],
            'click_power': user_data[6],
            'miner_speed': user_data[7],
            'offline_earnings': user_data[8]
        }
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id, amount):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE users SET balance = balance + ?, total_earned = total_earned + ? WHERE user_id = ?',
                  (amount, amount, user_id))
    
    conn.commit()
    conn.close()

# –ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞
def buy_miner(user_id):
    user = get_user_data(user_id)
    if not user:
        return False, 0
        
    miner_cost = 100 * (user['miners'] + 1)
    
    if user['balance'] >= miner_cost:
        conn = sqlite3.connect('miner_game.db')
        cursor = conn.cursor()
        
        cursor.execute('UPDATE users SET balance = balance - ?, miners = miners + 1 WHERE user_id = ?',
                      (miner_cost, user_id))
        
        conn.commit()
        conn.close()
        return True, miner_cost
    return False, miner_cost

# –£–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def upgrade_parameter(user_id, param_type):
    user = get_user_data(user_id)
    if not user:
        return False, 0
        
    current_level = user[param_type]
    upgrade_cost = 500 * current_level
    
    if user['balance'] >= upgrade_cost:
        conn = sqlite3.connect('miner_game.db')
        cursor = conn.cursor()
        
        cursor.execute(f'UPDATE users SET balance = balance - ?, {param_type} = {param_type} + 1 WHERE user_id = ?',
                      (upgrade_cost, user_id))
        
        conn.commit()
        conn.close()
        return True, upgrade_cost
    return False, upgrade_cost

# –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
def calculate_offline_earnings(user_id):
    user = get_user_data(user_id)
    if not user or not user['last_claim']:
        return 0
    
    try:
        last_claim = datetime.strptime(user['last_claim'], '%Y-%m-%d %H:%M:%S')
    except ValueError:
        last_claim = datetime.now() - timedelta(hours=1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        last_claim = datetime.now() - timedelta(hours=1)
    
    now = datetime.now()
    time_diff = min((now - last_claim).total_seconds(), 86400)
    
    if time_diff <= 0:
        return 0
        
    base_earnings = user['miners'] * (time_diff / 60)
    total_earnings = base_earnings * (1 + user['offline_earnings'] * 0.5) * user['miner_speed']
    
    return int(total_earnings)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
def update_last_claim(user_id):
    conn = sqlite3.connect('miner_game.db')
    cursor = conn.cursor()
    
    cursor.execute('UPDATE users SET last_claim = datetime("now") WHERE user_id = ?', (user_id,))
    
    conn.commit()
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å')
    btn2 = types.KeyboardButton('‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å')
    btn3 = types.KeyboardButton('üè™ –ú–∞–≥–∞–∑–∏–Ω')
    btn4 = types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    btn5 = types.KeyboardButton('üéÅ –ó–∞–±—Ä–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –ú–∞–≥–∞–∑–∏–Ω
def shop_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä', callback_data='buy_miner'),
        types.InlineKeyboardButton('‚ö° –°–∫–æ—Ä–æ—Å—Ç—å', callback_data='upgrade_miner_speed')
    )
    markup.row(
        types.InlineKeyboardButton('üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞', callback_data='upgrade_click_power'),
        types.InlineKeyboardButton('üåô –û—Ñ—Ñ–ª–∞–π–Ω', callback_data='upgrade_offline_earnings')
    )
    markup.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    try:
        register_user(message.from_user.id, message.from_user.username)
        
        welcome_text = """
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–õ–µ–Ω–∏–≤–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞*! üöÄ

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –ø–æ–∫—É–ø–∞—Ç—å –º–∞–π–Ω–µ—Ä—ã –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üí∞ –ë–∞–ª–∞–Ω—Å - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å
‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã –∫–ª–∏–∫–æ–º
üè™ –ú–∞–≥–∞–∑–∏–Ω - –ö—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üéÅ –ó–∞–±—Ä–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥ - –ü–æ–ª—É—á–∏—Ç—å –º–æ–Ω–µ—Ç—ã –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è

*–ù–∞—á–Ω–∏ –º–∞–π–Ω–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!* ‚õèÔ∏è
        """
        
        bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=main_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    try:
        user_id = message.from_user.id
        
        register_user(user_id, message.from_user.username)
        user = get_user_data(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return
            
        if message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
            offline_earnings = calculate_offline_earnings(user_id)
            balance_text = f"""
*–í–∞—à –±–∞–ª–∞–Ω—Å:* {user['balance']} ü™ô

*–ú–∞–π–Ω–µ—Ä–æ–≤:* {user['miners']} ‚õèÔ∏è
*–û—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥:* {offline_earnings} ü™ô
*–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {user['total_earned']} ü™ô

–ú–∞–π–Ω–µ—Ä—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—ã –æ—Ñ—Ñ–ª–∞–π–Ω!
            """
            bot.send_message(message.chat.id, balance_text, parse_mode='Markdown')
            
        elif message.text == '‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å':
            reward = 10 * user['click_power']
            update_balance(user_id, reward)
            update_last_claim(user_id)
            user = get_user_data(user_id)
            bot.send_message(message.chat.id, f"‚õèÔ∏è –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ *{reward} –º–æ–Ω–µ—Ç*! –ë–∞–ª–∞–Ω—Å: {user['balance']} ü™ô", parse_mode='Markdown')
            
        elif message.text == 'üè™ –ú–∞–≥–∞–∑–∏–Ω':
            shop_text = """
üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:*
‚Ä¢ üõí –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä (–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥)
‚Ä¢ ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –º–∞–π–Ω–µ—Ä–æ–≤)
‚Ä¢ üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫)
‚Ä¢ üåô –û—Ñ—Ñ–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–æ–∫ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥)
            """
            bot.send_message(message.chat.id, shop_text, parse_mode='Markdown', reply_markup=shop_menu())
            
        elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            stats_text = f"""
*üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

*–ë–∞–ª–∞–Ω—Å:* {user['balance']} ü™ô
*–ú–∞–π–Ω–µ—Ä–æ–≤:* {user['miners']} ‚õèÔ∏è
*–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:* {user['total_earned']} ü™ô

*–£–ª—É—á—à–µ–Ω–∏—è:*
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: –£—Ä–æ–≤–µ–Ω—å {user['miner_speed']}
üí™ –°–∏–ª–∞ –∫–ª–∏–∫–∞: –£—Ä–æ–≤–µ–Ω—å {user['click_power']}
üåô –û—Ñ—Ñ–ª–∞–π–Ω-–∑–∞—Ä–∞–±–æ—Ç–æ–∫: –£—Ä–æ–≤–µ–Ω—å {user['offline_earnings']}
            """
            bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')
            
        elif message.text == 'üéÅ –ó–∞–±—Ä–∞—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥':
            earnings = calculate_offline_earnings(user_id)
            if earnings > 0:
                update_balance(user_id, earnings)
                update_last_claim(user_id)
                user = get_user_data(user_id)
                bot.send_message(message.chat.id, f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ *{earnings} –º–æ–Ω–µ—Ç* –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è!\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} ü™ô", parse_mode='Markdown')
            else:
                bot.send_message(message.chat.id, "‚è∞ –í—ã –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥–∞!")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_messages: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        user_id = call.from_user.id
        user = get_user_data(user_id)
        
        if not user:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        if call.data == 'buy_miner':
            success, cost = buy_miner(user_id)
            if success:
                bot.answer_callback_query(call.id, f"‚úÖ –ö—É–ø–ª–µ–Ω –º–∞–π–Ω–µ—Ä –∑–∞ {cost} –º–æ–Ω–µ—Ç!")
                user = get_user_data(user_id)
                bot.edit_message_text(f"üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*\n‚úÖ –ú–∞–π–Ω–µ—Ä –∫—É–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–ë–∞–ª–∞–Ω—Å: {user['balance']} ü™ô", call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=shop_menu())
            else:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}")
                
        elif call.data == 'upgrade_miner_speed':
            success, cost = upgrade_parameter(user_id, 'miner_speed')
            if success:
                bot.answer_callback_query(call.id, f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫—É–ø–ª–µ–Ω–æ –∑–∞ {cost} –º–æ–Ω–µ—Ç!")
                user = get_user_data(user_id)
                bot.edit_message_text(f"üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*\n‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ —É–ª—É—á—à–µ–Ω–∞!\n–£—Ä–æ–≤–µ–Ω—å: {user['miner_speed']}\n–ë–∞–ª–∞–Ω—Å: {user['balance']} ü™ô", call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=shop_menu())
            else:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}")
                
        elif call.data == 'upgrade_click_power':
            success, cost = upgrade_parameter(user_id, 'click_power')
            if success:
                bot.answer_callback_query(call.id, f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —Å–∏–ª—ã –∫–ª–∏–∫–∞ –∫—É–ø–ª–µ–Ω–æ –∑–∞ {cost} –º–æ–Ω–µ—Ç!")
                user = get_user_data(user_id)
                bot.edit_message_text(f"üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*\n‚úÖ –°–∏–ª–∞ –∫–ª–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∞!\n–£—Ä–æ–≤–µ–Ω—å: {user['click_power']}\n–ë–∞–ª–∞–Ω—Å: {user['balance']} ü™ô", call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=shop_menu())
            else:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}")
                
        elif call.data == 'upgrade_offline_earnings':
            success, cost = upgrade_parameter(user_id, 'offline_earnings')
            if success:
                bot.answer_callback_query(call.id, f"‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥–∞ –∫—É–ø–ª–µ–Ω–æ –∑–∞ {cost} –º–æ–Ω–µ—Ç!")
                user = get_user_data(user_id)
                bot.edit_message_text(f"üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*\n‚úÖ –û—Ñ—Ñ–ª–∞–π–Ω-–¥–æ—Ö–æ–¥ —É–ª—É—á—à–µ–Ω!\n–£—Ä–æ–≤–µ–Ω—å: {user['offline_earnings']}\n–ë–∞–ª–∞–Ω—Å: {user['balance']} ü™ô", call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=shop_menu())
            else:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {cost}")
                
        elif call.data == 'back_to_main':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.route('/')
def index():
    return "–ë–æ—Ç '–õ–µ–Ω–∏–≤—ã–π –º–∞–π–Ω–µ—Ä' —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    return 'Bad Request', 400

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    try:
        init_db()
        print("–ë–æ—Ç '–õ–µ–Ω–∏–≤—ã–π –º–∞–π–Ω–µ—Ä' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –¥–æ—Å—Ç—É–ø–µ–Ω
        if WEBHOOK_URL:
            print(f"Webhook URL: {WEBHOOK_URL}")
            try:
                bot.remove_webhook()
                time.sleep(1)
                bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
                print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
                print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ webhook...")
        else:
            print("Webhook URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            
        # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        app.run(host='0.0.0.0', port=PORT, debug=False)
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
